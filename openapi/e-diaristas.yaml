openapi: 3.0.1
info:
  title: e-diaristas
  description: API back-end da aplicação e-diaristas
  contact:
    name: Urubatan Pacheco
    email: urubatan.pacheco@gmail.com
  version: 1.0.0
servers:
  - url: http://192.168.234.128:8080
    description: back-end da aplicação em ambiente de desenvolvimento
tags:
  - name: Me
  - name: Api
  - name: Auth
  - name: Diárias
  - name: Serviços
  - name: Usuários
  - name: Diaristas
  - name: Endereços
paths:
  /api:
    get:
      operationId: getLinks
      tags:
        - Api
      description: exibe os links iniciais da API
      responses:
        '200':
          description: exibição realizada com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Links'
  /api/diaristas/localidades:
    get:
      operationId: buscarDiaristasPorCep
      tags:
        - Diaristas
      description: busca diaristas que atendem uma determinada localidade
      parameters:
        - name: cep
          in: query
          description: número do CEP da localidade
          required: true
          schema:
            type: string
            pattern: '^\d{8}$|^\d{5}-\d{3}$'
          example: '13086701'
      responses:
        '200':
          description: diaristas que atendem ao CEP realizada com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DiaristasLocalidadePaginadaResponse'
        '400':
          description: CEP inválido ou não foi informado
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: CEP não encontrado
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/diaristas/disponibilidade:
    get:
      operationId: getDisponibilidade
      tags:
        - Diaristas
      description: verificiar a disponibilidade de diaristas que atendem uma determinada localidade
      parameters:
        - name: cep
          in: query
          description: número do CEP da localidade
          required: true
          schema:
            type: string
            pattern: '^\d{8}$|^\d{5}-\d{3}$'
          example: '13086701'
      responses:
        '200':
          description: verificação realizada com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DisponibilidadeResponse'
        '400':
          description: CEP inválido ou não foi informado
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: CEP não encontrado
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/enderecos:
    get:
      operationId: buscarEnderecoPorCep
      tags:
        - Endereços
      description: busca endereço referente a um CEP
      parameters:
        - name: cep
          in: query
          description: número do CEP do endereço
          required: true
          schema:
            type: string
            pattern: '^\d{8}$|^\d{5}-\d{3}$'
          example: '13086701'
      responses:
        '200':
          description: endereço correspondente ao CEP obtido com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/EnderecoResponse'
        '400':
          description: CEP inválido ou não foi informado
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: CEP não encontrado
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/usuarios:
    post:
      operationId: postUsuario
      tags:
        - Usuários
      description: Cadastrar um novo usuário
      requestBody:
        content:
          'multipart/form-data':
            schema:
              $ref: '#/components/schemas/CreateUsuarioRequest'
      responses:
        '201':
          description: usuário cadastrado com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CreatedUsuarioResponse'
        '400':
          description: houveram erros de validação
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/token:
    post:
      operationId: login
      tags:
        - Auth
      description: autenticar com as credenciais do usuário
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CredentialsRequest'
      responses:
        '200':
          description: usuário logado com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: houveram erros de validação
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: credenciais incorretas
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh:
    post:
      operationId: refresh
      tags:
        - Auth
      description: reautenticar usando o refresh token
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: usuário logado com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: houveram erros de validação
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: refresh token inválido
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      operationId: logout
      tags:
        - Auth
      description: realizar o logout ao invalidar o refresh token
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '205':
          description: logout realizado com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: houveram erros de validação
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: refresh token inválido
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/me:
    get:
      operationId: getMe
      tags:
        - Me
      description: obter dados do usuário logado
      security:
        - JWT: []
      responses:
        '200':
          description: usuário logado obtido com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/MeResponse'
        '400':
          description: houveram erros de validação
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: usuário não está autenticado
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/diarias:
    post:
      operationId: postDiaria
      tags:
        - Diárias
      description: cadastrar una diária
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DiariaRequest'
      responses:
        '201':
          description: diária cadastrada com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DiariaResponse'
        '400':
          description: houveram erros de validação
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: usuário não está autenticado
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: usuário autenticado não tem acesso para realizar esta operação
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JWT: []
  /api/diarias/{diariaId}/pagar:
    post:
      operationId: pagarDiaria
      tags:
        - Diárias
      description: Realizar pagamento de una diária
      parameters:
        - name: diariaId
          in: path
          description: ID da diária a ser paga
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PagamentoRequest'
      responses:
        '200':
          description: diária paga com sucesso
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: houveram erros de validação
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: usuário não está autenticado
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: usuário autenticado não tem acesso para realizar esta operação
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - JWT: []
components:
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
  schemas:
    ErrorResponse:
      properties:
        status:
          type: integer
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        path:
          type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
    DiaristasLocalidadePaginadaResponse:
      properties:
        diaristas:
          type: array
          items:
            $ref: '#/components/schemas/DiaristaLocalidadeResponse'
        quantidade_diaristas_restante:
          type: integer
    DiaristaLocalidadeResponse:
      type: object
      properties:
        nome_completo:
          type: string
        reputacao:
          type: number
          format: double
        url_foto_usuario:
          type: string
          format: uri
        cidade:
          type: string
    EnderecoResponse:
      type: object
      properties:
        cep:
          type: string
        logradouro:
          type: string
        complemento:
          type: string
        bairro:
          type: string
        localidade:
          type: string
        uf:
          type: string
        ibge:
          type: string
    DisponibilidadeResponse:
      type: object
      properties:
        disponibilidade:
          type: boolean
    Links:
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkResponse'
    LinkResponse:
      properties:
        type:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
        rel:
          type: string
        uri:
          type: string
          format: uri
    CreateUsuarioRequest:
      type: object
      required:
        - nome_completo
        - email
        - password
        - password_confirmation
        - tipo_usuario
        - nascimento
        - telefone
        - foto_documento
      properties:
        nome_completo:
          type: string
          minLength: 3
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          format: password
        password_confirmation:
          type: string
          format: password
        tipo_usuario:
          type: integer
          enum:
            - 1
            - 2
        cpf:
          type: string
          minLength: 11
          maxLength: 11
        nascimento:
          type: string
          format: date
        telefone:
          type: string
          minLength: 11
          maxLength: 11
        foto_documento:
          type: string
          format: binary
        chave_pix:
          type: string
          minLength: 11
          maxLength: 255
    CreatedUsuarioResponse:
      type: object
      properties:
        id:
          type: integer
        nome_completo:
          type: string
        email:
          type: string
        tipo_usuario:
          type: integer
          enum:
            - 1
            - 2
        cpf:
          type: string
        nascimento:
          type: string
          format: date
        telefone:
          type: string
        foto_documento:
          type: string
          format: uri
        chave_pix:
          type: string
        token:
          type: object
          #ref: '#/components/schemas/TokenResponse'
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkResponse'
    TokenResponse:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
    RefreshRequest:
      required:
        - refresh
      type: object
      properties:
        refresh:
          type: string
    CredentialsRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          format: password
    MeResponse:
      type: object
      properties:
        id:
          type: integer
        nome_completo:
          type: string
        email:
          type: string
        tipo_usuario:
          type: integer
          enum:
            - 1
            - 2
        cpf:
          type: string
        nascimento:
          type: string
          format: date
        telefone:
          type: string
        chave_pix:
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkResponse'
    DiariaRequest:
      type: object
      required:
        - data_atendimento
        - tempo_atendimento
        - preco
        - logradouro
        - numero
        - bairro
        - cidade
        - estado
        - cep
        - quantidade_quartos
        - quantidade_salas
        - quantidade_cozinhas
        - quantidade_banheiros
        - quantidade_quintais
        - quantidade_outros
        - servico
        - codigo_ibge
      properties:
        data_atendimento:
          type: string
          format: date-time
        tempo_atendimento:
          type: integer
        preco:
          type: number
          format: double
        cep:
          type: string
        logradouro:
          type: string
        complemento:
          type: string
        bairro:
          type: string
        cidade:
          type: string
        estado:
          type: string
          maxLength: 2
        codigo_ibge:
          type: string
        numero:
          type: string
        quantidade_salas:
          type: integer
        quantidade_cozinhas:
          type: integer
        quantidade_banheiros:
          type: integer
        quantidade_quintais:
          type: integer
        quantidade_outros:
          type: integer
        servico:
          type: integer
    DiariaResponse:
      type: object
      properties:
        id:
          type: integer
        status:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
        data_atendimento:
          type: string
          format: date-time
        tempo_atendimento:
          type: integer
        preco:
          type: number
          format: double
        cep:
          type: string
        logradouro:
          type: string
        complemento:
          type: string
        bairro:
          type: string
        cidade:
          type: string
        estado:
          type: string
          maxLength: 2
        codigo_ibge:
          type: string
        numero:
          type: string
        quantidade_salas:
          type: integer
        quantidade_cozinhas:
          type: integer
        quantidade_banheiros:
          type: integer
        quantidade_quintais:
          type: integer
        quantidade_outros:
          type: integer
        servico:
          type: integer
        cliente:
          type: object
          #ref: '#/components/schemas/UsuarioDiariaResponse'
        diarista:
          type: object
          #ref: '#/components/schemas/UsuarioDiariaResponse'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkResponse'
    UsuarioDiariaResponse:
      type: object
      properties:
        id:
          type: integer
        nome_completo:
          type: string
        nascimento:
          type: string
          format: date
        foto_usuario:
          type: string
          format: uri
        tipo_usuario:
          type: integer
          enum:
            - 1
            - 2
        telefone:
          type: string
        reputacao:
          type: integer
    PagamentoRequest:
      required:
        - card_hash
      type: object
      properties:
        card_hash:
          type: string
    MessageResponse:
      type: object
      properties:
        mensagem:
          type: string
